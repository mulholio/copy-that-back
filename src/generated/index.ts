// Code generated by Prisma (prisma@1.22.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  that: (where?: ThatWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  that: (where: ThatWhereUniqueInput) => ThatPromise;
  thats: (
    args?: {
      where?: ThatWhereInput;
      orderBy?: ThatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<That>;
  thatsConnection: (
    args?: {
      where?: ThatWhereInput;
      orderBy?: ThatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ThatConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createThat: (data: ThatCreateInput) => ThatPromise;
  updateThat: (
    args: { data: ThatUpdateInput; where: ThatWhereUniqueInput }
  ) => ThatPromise;
  updateManyThats: (
    args: { data: ThatUpdateManyMutationInput; where?: ThatWhereInput }
  ) => BatchPayloadPromise;
  upsertThat: (
    args: {
      where: ThatWhereUniqueInput;
      create: ThatCreateInput;
      update: ThatUpdateInput;
    }
  ) => ThatPromise;
  deleteThat: (where: ThatWhereUniqueInput) => ThatPromise;
  deleteManyThats: (where?: ThatWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  that: (
    where?: ThatSubscriptionWhereInput
  ) => ThatSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ThatOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "source_ASC"
  | "source_DESC"
  | "whyNotTry_ASC"
  | "whyNotTry_DESC"
  | "image_ASC"
  | "image_DESC"
  | "largeImage_ASC"
  | "largeImage_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Permission = "ADMIN" | "USER";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateOneRequiredWithoutThatsInput {
  create?: UserCreateWithoutThatsInput;
  update?: UserUpdateWithoutThatsDataInput;
  upsert?: UserUpsertWithoutThatsInput;
  connect?: UserWhereUniqueInput;
}

export type ThatWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpsertWithoutThatsInput {
  update: UserUpdateWithoutThatsDataInput;
  create: UserCreateWithoutThatsInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  thats_every?: ThatWhereInput;
  thats_some?: ThatWhereInput;
  thats_none?: ThatWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ThatCreateInput {
  title: String;
  description: String;
  source: String;
  whyNotTry: String;
  image: String;
  largeImage: String;
  submittedBy: UserCreateOneWithoutThatsInput;
}

export interface UserCreateInput {
  username: String;
  email: String;
  password: String;
  thats?: ThatCreateManyWithoutSubmittedByInput;
  permissions?: UserCreatepermissionsInput;
}

export interface UserCreateOneWithoutThatsInput {
  create?: UserCreateWithoutThatsInput;
  connect?: UserWhereUniqueInput;
}

export interface ThatUpdateManyMutationInput {
  title?: String;
  description?: String;
  source?: String;
  whyNotTry?: String;
  image?: String;
  largeImage?: String;
}

export interface UserCreateWithoutThatsInput {
  username: String;
  email: String;
  password: String;
  permissions?: UserCreatepermissionsInput;
}

export interface ThatSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ThatWhereInput;
  AND?: ThatSubscriptionWhereInput[] | ThatSubscriptionWhereInput;
  OR?: ThatSubscriptionWhereInput[] | ThatSubscriptionWhereInput;
  NOT?: ThatSubscriptionWhereInput[] | ThatSubscriptionWhereInput;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface ThatUpdateManyDataInput {
  title?: String;
  description?: String;
  source?: String;
  whyNotTry?: String;
  image?: String;
  largeImage?: String;
}

export interface ThatUpdateInput {
  title?: String;
  description?: String;
  source?: String;
  whyNotTry?: String;
  image?: String;
  largeImage?: String;
  submittedBy?: UserUpdateOneRequiredWithoutThatsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface ThatUpdateManyWithoutSubmittedByInput {
  create?:
    | ThatCreateWithoutSubmittedByInput[]
    | ThatCreateWithoutSubmittedByInput;
  delete?: ThatWhereUniqueInput[] | ThatWhereUniqueInput;
  connect?: ThatWhereUniqueInput[] | ThatWhereUniqueInput;
  disconnect?: ThatWhereUniqueInput[] | ThatWhereUniqueInput;
  update?:
    | ThatUpdateWithWhereUniqueWithoutSubmittedByInput[]
    | ThatUpdateWithWhereUniqueWithoutSubmittedByInput;
  upsert?:
    | ThatUpsertWithWhereUniqueWithoutSubmittedByInput[]
    | ThatUpsertWithWhereUniqueWithoutSubmittedByInput;
  deleteMany?: ThatScalarWhereInput[] | ThatScalarWhereInput;
  updateMany?:
    | ThatUpdateManyWithWhereNestedInput[]
    | ThatUpdateManyWithWhereNestedInput;
}

export interface ThatUpsertWithWhereUniqueWithoutSubmittedByInput {
  where: ThatWhereUniqueInput;
  update: ThatUpdateWithoutSubmittedByDataInput;
  create: ThatCreateWithoutSubmittedByInput;
}

export interface UserUpdateWithoutThatsDataInput {
  username?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface ThatUpdateWithWhereUniqueWithoutSubmittedByInput {
  where: ThatWhereUniqueInput;
  data: ThatUpdateWithoutSubmittedByDataInput;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ThatUpdateManyWithWhereNestedInput {
  where: ThatScalarWhereInput;
  data: ThatUpdateManyDataInput;
}

export interface ThatCreateManyWithoutSubmittedByInput {
  create?:
    | ThatCreateWithoutSubmittedByInput[]
    | ThatCreateWithoutSubmittedByInput;
  connect?: ThatWhereUniqueInput[] | ThatWhereUniqueInput;
}

export interface ThatCreateWithoutSubmittedByInput {
  title: String;
  description: String;
  source: String;
  whyNotTry: String;
  image: String;
  largeImage: String;
}

export interface UserUpdateInput {
  username?: String;
  email?: String;
  password?: String;
  thats?: ThatUpdateManyWithoutSubmittedByInput;
  permissions?: UserUpdatepermissionsInput;
}

export interface ThatWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  whyNotTry?: String;
  whyNotTry_not?: String;
  whyNotTry_in?: String[] | String;
  whyNotTry_not_in?: String[] | String;
  whyNotTry_lt?: String;
  whyNotTry_lte?: String;
  whyNotTry_gt?: String;
  whyNotTry_gte?: String;
  whyNotTry_contains?: String;
  whyNotTry_not_contains?: String;
  whyNotTry_starts_with?: String;
  whyNotTry_not_starts_with?: String;
  whyNotTry_ends_with?: String;
  whyNotTry_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  largeImage?: String;
  largeImage_not?: String;
  largeImage_in?: String[] | String;
  largeImage_not_in?: String[] | String;
  largeImage_lt?: String;
  largeImage_lte?: String;
  largeImage_gt?: String;
  largeImage_gte?: String;
  largeImage_contains?: String;
  largeImage_not_contains?: String;
  largeImage_starts_with?: String;
  largeImage_not_starts_with?: String;
  largeImage_ends_with?: String;
  largeImage_not_ends_with?: String;
  submittedBy?: UserWhereInput;
  AND?: ThatWhereInput[] | ThatWhereInput;
  OR?: ThatWhereInput[] | ThatWhereInput;
  NOT?: ThatWhereInput[] | ThatWhereInput;
}

export interface ThatScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  whyNotTry?: String;
  whyNotTry_not?: String;
  whyNotTry_in?: String[] | String;
  whyNotTry_not_in?: String[] | String;
  whyNotTry_lt?: String;
  whyNotTry_lte?: String;
  whyNotTry_gt?: String;
  whyNotTry_gte?: String;
  whyNotTry_contains?: String;
  whyNotTry_not_contains?: String;
  whyNotTry_starts_with?: String;
  whyNotTry_not_starts_with?: String;
  whyNotTry_ends_with?: String;
  whyNotTry_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  largeImage?: String;
  largeImage_not?: String;
  largeImage_in?: String[] | String;
  largeImage_not_in?: String[] | String;
  largeImage_lt?: String;
  largeImage_lte?: String;
  largeImage_gt?: String;
  largeImage_gte?: String;
  largeImage_contains?: String;
  largeImage_not_contains?: String;
  largeImage_starts_with?: String;
  largeImage_not_starts_with?: String;
  largeImage_ends_with?: String;
  largeImage_not_ends_with?: String;
  AND?: ThatScalarWhereInput[] | ThatScalarWhereInput;
  OR?: ThatScalarWhereInput[] | ThatScalarWhereInput;
  NOT?: ThatScalarWhereInput[] | ThatScalarWhereInput;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  email?: String;
  password?: String;
  permissions?: UserUpdatepermissionsInput;
}

export interface ThatUpdateWithoutSubmittedByDataInput {
  title?: String;
  description?: String;
  source?: String;
  whyNotTry?: String;
  image?: String;
  largeImage?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  permissions: Permission[];
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface ThatConnection {}

export interface ThatConnectionPromise
  extends Promise<ThatConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ThatEdge>>() => T;
  aggregate: <T = AggregateThatPromise>() => T;
}

export interface ThatConnectionSubscription
  extends Promise<AsyncIterator<ThatConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ThatEdgeSubscription>>>() => T;
  aggregate: <T = AggregateThatSubscription>() => T;
}

export interface ThatSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ThatSubscriptionPayloadPromise
  extends Promise<ThatSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ThatPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ThatPreviousValuesPromise>() => T;
}

export interface ThatSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ThatSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ThatSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ThatPreviousValuesSubscription>() => T;
}

export interface AggregateThat {
  count: Int;
}

export interface AggregateThatPromise
  extends Promise<AggregateThat>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateThatSubscription
  extends Promise<AsyncIterator<AggregateThat>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ThatEdge {
  cursor: String;
}

export interface ThatEdgePromise extends Promise<ThatEdge>, Fragmentable {
  node: <T = ThatPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ThatEdgeSubscription
  extends Promise<AsyncIterator<ThatEdge>>,
    Fragmentable {
  node: <T = ThatSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface That {
  id: ID_Output;
  title: String;
  description: String;
  source: String;
  whyNotTry: String;
  image: String;
  largeImage: String;
}

export interface ThatPromise extends Promise<That>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  source: () => Promise<String>;
  whyNotTry: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
  submittedBy: <T = UserPromise>() => T;
}

export interface ThatSubscription
  extends Promise<AsyncIterator<That>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  whyNotTry: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
  submittedBy: <T = UserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ThatPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  source: String;
  whyNotTry: String;
  image: String;
  largeImage: String;
}

export interface ThatPreviousValuesPromise
  extends Promise<ThatPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  source: () => Promise<String>;
  whyNotTry: () => Promise<String>;
  image: () => Promise<String>;
  largeImage: () => Promise<String>;
}

export interface ThatPreviousValuesSubscription
  extends Promise<AsyncIterator<ThatPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  whyNotTry: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  largeImage: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
  permissions: Permission[];
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  thats: <T = FragmentableArray<That>>(
    args?: {
      where?: ThatWhereInput;
      orderBy?: ThatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  permissions: () => Promise<Permission[]>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  thats: <T = Promise<AsyncIterator<ThatSubscription>>>(
    args?: {
      where?: ThatWhereInput;
      orderBy?: ThatOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "That",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/copy-that/copy_that_back/dev`
});
export const prisma = new Prisma();
